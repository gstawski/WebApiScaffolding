<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="WebApiScaffolding.Models.Templates" #>
<#@ parameter name="context" type="System.String" #>
<#
    GeneratorContext ctx = new GeneratorContext(context);
#>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
<#PrintUsages(ctx);#>

namespace <#=ctx.Namespace#>;

public class <#=ctx.ClassName#>Configuration : IEntityTypeConfiguration<<#=ctx.ClassName#>>
{
    public void Configure(EntityTypeBuilder<<#=ctx.ClassName#>> builder)
    {
        builder.ToTable("<#=ToSnakeCase(ctx.ClassName)#>", "dbo");
        builder.HasKey(x => x.Id);

        builder.Property(x => x.Id).HasColumnName("id_<#=ToSnakeCase(ctx.ClassName)#>").HasConversion(c => c.Value, c => new <#=ctx.ClassName#>Id(c));

<#PrintProperties(ctx);#>
    }
}

<#+
    public void PrintUsages(GeneratorContext ctx)
    {
        if (ctx.MetaData.Namespaces == null)
        {
            return;
        }

        foreach (var n in ctx.MetaData.Namespaces)
        {
#>
using <#= n #>;
<#+
        }
    }

    public void PrintProperties(GeneratorContext ctx)
    {
        foreach (var prop in ctx.MetaData.Properties)
        {
            if (prop.IsSimpleType)
            {
#>
        builder.Property(x => x.<#= prop.Name #>).HasColumnName("<#= ToSnakeCase(prop.Name) #>")<#=SpecialAttributes(prop, ctx.ClassName)#><#= IsRequired(prop) #>;
<#+
            }
            else if (!prop.IsCollection && !string.IsNullOrEmpty(prop.WithMany))
            {
#>

        builder.Property(x => x.<#= prop.Name #>).HasColumnName("<#= ToSnakeCase(prop.Name) #>")<#=SpecialAttributes(prop, ctx.ClassName)#><#= IsRequired(prop) #>;

        builder.HasOne<<#= prop.WithOne #>>()
            .WithMany(x => x.<#= prop.WithMany #>)
            .HasForeignKey(x => x.<#= prop.ForeignKey #>)
            .OnDelete(DeleteBehavior.Cascade);
<#+
            }
            else if (!prop.IsCollection && !string.IsNullOrEmpty(prop.WithOne))
            {
#>

        builder.HasOne(x => x.<#= prop.Name #>)
            .WithMany()
            .HasForeignKey(x => x.<#= prop.ForeignKey #>)
            .OnDelete(DeleteBehavior.Restrict);

        builder.Navigation(x => x.<#= prop.Name #>)
            .AutoInclude();
<#+
            }
            else if (prop.IsCollection && !string.IsNullOrEmpty(prop.WithOne))
            {
#>

        builder.Navigation(x => x.<#= prop.Name #>)
            .AutoInclude();
<#+
            }
        }
    }

    public static string IsRequired(PropertyMeta prop)
    {
        return prop.Type.EndsWith("?") ? string.Empty :".IsRequired()";
    }

    public static string SpecialAttributes(PropertyMeta prop, string className)
    {
        if (prop.Type.StartsWith("string"))
        {
            return $".HasMaxLength({className}.{prop.Name}MaxLength)";
        }

        if (prop.Type.StartsWith("decimal"))
        {
            return ".HasColumnType(\"decimal\").HasPrecision(6, 2)";
        }

        if (prop.Type.StartsWith("DateOnly"))
        {
            return ".HasColumnType(\"date\")";
        }

        if (prop.IsValueObject)
        {
            return $".HasConversion(x => x.Value, x => new {prop.Type.TrimEnd('?')}(x))";
        }

        return string.Empty;
    }

    public static string ToSnakeCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            return input;
        }

        var builder = new StringBuilder(input.Length + 5);
        var previousCharIsLetterOrDigit = false;

        for (int i = 0; i < input.Length; i++)
        {
            char c = input[i];

            if (char.IsUpper(c))
            {
                if (i > 0 && previousCharIsLetterOrDigit)
                {
                    builder.Append('_');
                }
                builder.Append(char.ToLowerInvariant(c));
                previousCharIsLetterOrDigit = true;
            }
            else if (c == ' ' || c == '-')
            {
                if (builder.Length > 0 && builder[builder.Length - 1] != '_')
                {
                    builder.Append('_');
                }
                previousCharIsLetterOrDigit = false;
            }
            else if (char.IsLetterOrDigit(c))
            {
                builder.Append(c);
                previousCharIsLetterOrDigit = true;
            }
            else if (c == '_')
            {
                if (builder.Length > 0 && builder[builder.Length - 1] != '_')
                {
                    builder.Append('_');
                }
                previousCharIsLetterOrDigit = false;
            }
        }

        return builder.ToString();
    }
#>