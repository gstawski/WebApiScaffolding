<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="WebApiScaffolding.Models.Templates" #>
<#@ parameter name="context" type="System.String" #>
<#
    GeneratorContext ctx = new GeneratorContext(context);
    string classNameLowLetter = FirstLetterToLower(ctx.ClassName);
#>
using MediatR;
using SharedKernel.Contracts;
using SharedKernel.Exceptions;
<#PrintUsages(ctx);#>

namespace <#=ctx.Namespace#>;

public sealed class Update<#=ctx.ClassName#>CommandHandler : <#=ctx.ClassName#>BaseCommandHandler, IRequestHandler<Update<#=ctx.ClassName#>Command, Unit>
{
    private readonly I<#=ctx.ClassName#>Repository _<#=classNameLowLetter#>Repository;

    public Update<#=ctx.ClassName#>CommandHandler(I<#=ctx.ClassName#>Repository <#=classNameLowLetter#>Repository) : base()
    {
        _<#=classNameLowLetter#>Repository = <#=classNameLowLetter#>Repository;
    }

    public async Task<Unit> Handle(Update<#=ctx.ClassName#>Command request, CancellationToken cancellationToken)
    {
        var <#=classNameLowLetter#> = await _<#=classNameLowLetter#>Repository.FindAsync(new <#=ctx.ClassName#>Id(request.Id<#=ctx.ClassName#>));

        if (<#=classNameLowLetter#> == null)
        {
            throw new EntityNotFoundException(typeof(<#=ctx.ClassName#>), request.Id<#=ctx.ClassName#>);
        }

        <#=classNameLowLetter#>.Update(
<#PrintProperties(ctx);#>
        );

<#PrintUpdates(ctx);#>

        return Unit.Value;
    }
}
<#+
    public void PrintUsages(GeneratorContext ctx)
    {
        if (ctx.MetaData.Namespaces == null)
        {
            return;
        }

        foreach (var n in ctx.MetaData.Namespaces)
        {
#>
using <#= n #>;
<#+
        }
    }

    public void PrintProperties(GeneratorContext ctx)
    {
        foreach (var prop in ctx.MetaData.Properties)
        {
            if (!prop.IsCollection)
            {
#>
                request.<#= prop.Name #><#= PrintComma(ctx, prop) #>
<#+
            }
        }
    }

    public void PrintUpdates(GeneratorContext ctx)
    {
        foreach (var prop in ctx.MetaData.Properties)
        {
            if (prop.IsCollection)
            {
#>
        <#= FirstLetterToLower(ctx.ClassName) #>.Update<#=prop.Name#>(<#= FirstLetterToLower(ctx.ClassName) #>, request);
<#+
            }
        }
    }

    public static string FirstLetterToLower(string str)
    {
        return char.ToLower(str[0]) + str.Substring(1);
    }

    public static string PrintComma(GeneratorContext ctx, PropertyMeta prop)
    {
        for (int i = 0; i < ctx.MetaData.Properties.Count; i++)
        {
            var p = ctx.MetaData.Properties[i];
            if (p.Name == prop.Name && i < ctx.MetaData.Properties.Count - 1)
            {
                return ",";
            }

        }
        return string.Empty;
    }
#>