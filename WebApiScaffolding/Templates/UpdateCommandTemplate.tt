<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="WebApiScaffolding.Models.Templates" #>
<#@ parameter name="context" type="System.String" #>
<#
    GeneratorContext ctx = new GeneratorContext(context);
#>
<#
if (ctx.Order == 0)
{
#>
using MediatR;
using SharedKernel.Abstractions.CQRS.Commands;
<#
}
#>
using System.ComponentModel.DataAnnotations;
<#PrintUsages(ctx);#>

namespace <#=ctx.Namespace#>;

public sealed class Update<#=ctx.ClassName#>Command : <#=ctx.ClassName#>BaseCommand<#= (ctx.Order == 0 ? ", ICommand<Unit>" : string.Empty) #>
{
    [Required]
    public int Id<#=ctx.ClassName#> { get; set; }
<#PrintProperties(ctx);#>
}
<#+
    public void PrintUsages(GeneratorContext ctx)
    {
        if (ctx.MetaData.Namespaces == null)
        {
            return;
        }

        foreach (var n in ctx.MetaData.Namespaces)
        {
#>
using <#= n #>;
<#+
        }
    }

    public void PrintProperties(GeneratorContext ctx)
    {
        foreach (var prop in ctx.MetaData.Properties)
        {
            if (prop.IsCollection)
            {
#>
    public List<<#= TypeName(prop) #>> <#= prop.Name #> { get; set; } = new();
<#+
            }
            else
            {
#>
    public <#= TypeName(prop) #> <#= prop.Name #> { get; set; } = new();
<#+
            }
        }
    }

    public static string TypeName(PropertyMeta prop)
    {
        string typeName = prop.Type;
        if (typeName.EndsWith("?"))
        {
            typeName = typeName.TrimEnd('?');
            return $"Update{typeName}Command?";
        }
        return $"Update{typeName}Command";
    }
#>